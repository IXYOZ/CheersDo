{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///Users/ixyo/Documents/cheersdo/src/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///Users/ixyo/Documents/cheersdo/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// app/api/auth/[...nextauth]/route.ts\n\nimport NextAuth from \"next-auth\";\nimport EmailProvider from \"next-auth/providers/email\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { prisma } from \"@/lib/prisma\";\n\nconst handler = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: Number(process.env.EMAIL_SERVER_PORT),\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n  session: {\n    strategy: \"database\",\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  callbacks: {\n    async session({ session }) {\n      const dbUser = await prisma.user.findUnique({\n        where: { email: session.user?.email ?? undefined },\n      });\n\n      if (dbUser) {\n        session.user.id = dbUser.id;\n        session.user.email = dbUser.email;\n      }\n\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n      }\n      return token;\n    },\n  },\n});\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;;AAEtC;AACA;AACA;AACA;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,oJAAA,CAAA,UAAa,AAAD,EAAE;YACZ,QAAQ;gBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,OAAO,QAAQ,GAAG,CAAC,iBAAiB;gBAC1C,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;gBACzC;YACF;YACA,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE;YACvB,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1C,OAAO;oBAAE,OAAO,QAAQ,IAAI,EAAE,SAAS;gBAAU;YACnD;YAEA,IAAI,QAAQ;gBACV,QAAQ,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE;gBAC3B,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,KAAK;YACnC;YAEA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;IACF;AACF","debugId":null}}]
}