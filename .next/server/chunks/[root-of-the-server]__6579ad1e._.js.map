{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/ixyo/Documents/cheersdo/src/app/api/task/%5Bid%5D/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst prisma = new PrismaClient();\n\n//GET /api/task/:id\n\nexport async function GET(\n  _req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    \n    const { id } = params;\n    const task = await prisma.task.findUnique({\n      where: { id },\n    });\n    if (!task) {\n      return NextResponse.json({ message: \"Todo not found\" }, { status: 400 });\n    }\n    return NextResponse.json(task);\n  } catch (error) {\n    console.error(\"GET task error\", error);\n    return NextResponse.json(\n      { message: \"Error fetching task\" },\n      { status: 500 }\n    );\n  }\n}\n\n//PUT /api/task/:id\n\nexport async function PUT(\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const { id } = await params;\n  const { done } = await req.json();\n\n  try {\n    const updated = await prisma.task.update({\n      where: { id },\n      data: { done },\n    });\n    return NextResponse.json({ message: \"Updated\", task: updated });\n  } catch (error) {\n    console.error(\"PUT /api/task/:id error:\", error);\n    return NextResponse.json(\n      { message: \"Failed to update task\" },\n      { status: 500 }\n    );\n  }\n}\n\n//DELETE\n\nexport async function DELETE(\n  _req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n\n  try {\n    await prisma.task.delete({\n      where: { id },\n    });\n    return NextResponse.json({ message: \"Deleted\" });\n  } catch (error) {\n    console.error(\"DELETE /api/task/:id error\", error);\n    return NextResponse.json(\n      { message: \"Failed to delete task\" },\n      { status: 500 }\n    );\n  }\n}\nawait prisma.$disconnect();"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAIxB,eAAe,IACpB,IAAiB,EACjB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QAEF,MAAM,EAAE,EAAE,EAAE,GAAG;QACf,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAG;QACd;QACA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAE/B,IAAI;QACF,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvC,OAAO;gBAAE;YAAG;YACZ,MAAM;gBAAE;YAAK;QACf;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAW,MAAM;QAAQ;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,OACpB,IAAiB,EACjB,EAAE,MAAM,EAA8B;IAEtC,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI;QACF,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE;YAAG;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAU;IAChD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AACA,MAAM,OAAO,WAAW","debugId":null}}]
}