{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/ixyo/Documents/cheersdo/src/app/api/todo/%5Bid%5D/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst prisma = new PrismaClient();\n\n//GET /api/todo/:id\n\nexport async function GET(\n  _req: NextRequest,\n  {params}: { params: { id: string } }\n) {\n  try {\n    const {id} = params\n    const todo = await prisma.todo.findUnique({\n      where: { id: Number(id)},\n    });\n    if (!todo) {\n      return NextResponse.json({ message: \"Todo not found\" }, { status: 400 });\n    }\n    return NextResponse.json(todo);\n  } catch (error) {\n    console.error(\"GET todo error\", error);\n    return NextResponse.json(\n      { message: \"Error fetching todo\" },\n      { status: 500 }\n    );\n  }\n}\n\n//PUT /api/todo/:id\n\nexport async function PUT(\n  req: NextRequest,\n  {params} : { params: { id: string } }\n) {\n  const {id} = await  params\n  const {done} = await req.json()\n\n  try {\n    const updated = await prisma.todo.update({\n      where: {  id: Number(id)},\n      data: { done},\n    });\n    return NextResponse.json({ message: \"Updated\", todo: updated });\n  } catch (error) {\n    console.error(\"PUT /api/todo/:id error:\", error);\n    return NextResponse.json(\n      { message: \"Failed to update todo\" },\n      { status: 500 }\n    );\n  }\n}\n\n//DELETE\n\nexport async function DELETE(\n  _req: NextRequest,\n  {params}: { params: { id: string } }\n) {\n  const { id } = params;\n\n  try {\n    await prisma.todo.delete({\n      where: { id: Number(id) },\n    });\n    return NextResponse.json({ message: \"Deleted\" });\n  } catch (error) {\n    console.error(\"DELETE /api/todo/:id error\", error);\n    return NextResponse.json(\n      { message: \"Failed to delete todo\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAIxB,eAAe,IACpB,IAAiB,EACjB,EAAC,MAAM,EAA6B;IAEpC,IAAI;QACF,MAAM,EAAC,EAAE,EAAC,GAAG;QACb,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI,OAAO;YAAG;QACzB;QACA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,IACpB,GAAgB,EAChB,EAAC,MAAM,EAA8B;IAErC,MAAM,EAAC,EAAE,EAAC,GAAG,MAAO;IACpB,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,IAAI;IAE7B,IAAI;QACF,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvC,OAAO;gBAAG,IAAI,OAAO;YAAG;YACxB,MAAM;gBAAE;YAAI;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAW,MAAM;QAAQ;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,OACpB,IAAiB,EACjB,EAAC,MAAM,EAA6B;IAEpC,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI;QACF,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,OAAO;gBAAE,IAAI,OAAO;YAAI;QAC1B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAU;IAChD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}