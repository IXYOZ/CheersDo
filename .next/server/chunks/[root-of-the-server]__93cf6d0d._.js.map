{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/ixyo/Documents/cheersdo/src/app/api/task/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n//POST API task\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const { title, deadline, priority, done, userEmail,timezone } = body;\n\n    if (!title  || !priority || !userEmail) {\n      return NextResponse.json(\n        { message: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    const pointsMap: Record<string, number> = {\n      high: 3,\n      medium: 2,\n      low: 1,\n    };\n    const normPriority = priority.toLowerCase()\n    const points = pointsMap[normPriority] || 0;\n\n    let user = await prisma.user.findUnique({\n      where:{email: userEmail}\n    })\n    console.log(\"User from DB\", user)\n    if(!user){\n      user = await prisma.user.create({\n        data:{email: userEmail}\n      })\n    }\n\n    const newTask = await prisma.task.create({\n      data: {\n        title,\n        deadline:deadline ? new Date(deadline) : null,\n        priority,\n        timezone,\n        done,\n        userId: user.id\n        //Mocked points\n      },\n    });\n\n    return NextResponse.json({ message: \"task created\", newTask, points });\n  } catch (error) {\n    console.error(\"POST /api/task error:\", error);\n    return NextResponse.json(\n      { message: \"Failed to create task\" },\n      { status: 500 }\n    );\n  }\n}\n\n// GET /api/task?userId= ????\n\nexport async function GET(req: NextRequest) {\n    const {searchParams} = new URL(req.url)\n    const userId = searchParams.get(\"userID\")\n\n    if(!userId){\n        return NextResponse.json({message:\"Missing userID\"},{status: 400})\n    }\n    try {\n        const tasks = await prisma.task.findMany({\n            where:{userId},\n            orderBy: {createdAt:\"desc\"},\n        })\n        \n        return NextResponse.json({tasks})\n    } catch (error) {\n        console.error(\"GET /api/task/error:\", error)\n        return NextResponse.json({message:\"Failed to fetch tasks\"},{status: 500})\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAIxB,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC,QAAQ,EAAE,GAAG;QAEhE,IAAI,CAAC,SAAU,CAAC,YAAY,CAAC,WAAW;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAoC;YACxC,MAAM;YACN,QAAQ;YACR,KAAK;QACP;QACA,MAAM,eAAe,SAAS,WAAW;QACzC,MAAM,SAAS,SAAS,CAAC,aAAa,IAAI;QAE1C,IAAI,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YACtC,OAAM;gBAAC,OAAO;YAAS;QACzB;QACA,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,IAAG,CAAC,MAAK;YACP,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;gBAC9B,MAAK;oBAAC,OAAO;gBAAS;YACxB;QACF;QAEA,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ;gBACA,UAAS,WAAW,IAAI,KAAK,YAAY;gBACzC;gBACA;gBACA;gBACA,QAAQ,KAAK,EAAE;YAEjB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgB;YAAS;QAAO;IACtE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,IAAI,GAAgB;IACtC,MAAM,EAAC,YAAY,EAAC,GAAG,IAAI,IAAI,IAAI,GAAG;IACtC,MAAM,SAAS,aAAa,GAAG,CAAC;IAEhC,IAAG,CAAC,QAAO;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAQ;QAAgB,GAAE;YAAC,QAAQ;QAAG;IACpE;IACA,IAAI;QACA,MAAM,QAAQ,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC;YACrC,OAAM;gBAAC;YAAM;YACb,SAAS;gBAAC,WAAU;YAAM;QAC9B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC;QAAK;IACnC,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAQ;QAAuB,GAAE;YAAC,QAAQ;QAAG;IAC3E;AACJ","debugId":null}}]
}